class Solution {
public:

    vector<int> nextGreater(vector<int> &height){
        int n = height.size();
        vector<int> ans(n);
        ans[n-1] = height[n-1];
        for(int i = n-2;i>=0;i--){
            ans[i] = max(height[i],ans[i+1]);
        }
        return ans;
    }

    vector<int> prevGreater(vector<int> &height){

        int n = height.size();

        vector<int> ans(n);

        ans[0] = height[0];
        for(int i = 1;i<n;i++){
            ans[i] = max(ans[i-1],height[i]);
        }
        return ans;
    }



    int trap(vector<int>& height) {

        //Approach : 
        //1.find nextgreater and previous greater elevations of a current elevations
        //2. find min among nextgreater and prevGreater elevation
        //3. subract height of current elevation from a minGreater to know water storage at current elevation

        int n = height.size();

        vector<int> next = nextGreater(height);
        vector<int> prev = prevGreater(height);

        
        int totalStorage = 0;

        for(int i = 0;i<n;i++){
                int minElevation = min(prev[i],next[i]);
                totalStorage = totalStorage +  minElevation-height[i];
        }
        return totalStorage;

        
    }
};
